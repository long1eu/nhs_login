import 'package:collection/collection.dart';
import 'package:meta/meta.dart';
import 'package:nhs_login/src/models/authentication/nhs_authentication_error.dart';
import 'package:nhs_login/src/models/nhs_response_error.dart';
import 'package:nhs_login/src/nhs_authentication.dart';

/// The Authentication Response returns this parameters by adding them as query
/// parameters to the redirect_uri specified in the [NhsAuthentication].
class NhsAuthenticationResponse
    implements NhsResponseError<NhsAuthenticationError> {
  const NhsAuthenticationResponse({
    @required this.state,
    this.code,
    this.error,
    this.errorDescription,
    this.errorUri,
    this.other,
  });

  /// The authorization code generated by the NHS Login Platform.
  ///
  /// The authorization code MUST expire shortly after it is issued to mitigate
  /// the risk of leaks. A maximum authorization code lifetime of 10 minutes is
  /// RECOMMENDED.
  ///
  /// The client MUST NOT use the authorization code more than once. If an
  /// authorization code is used more than once, the Platform MUST deny the
  /// request and SHOULD revoke (when possible) all tokens previously issued
  /// based on that authorization code.
  ///
  /// The authorization code is bound to the client identifier and redirection
  /// URI
  final String code;

  /// If the "state" parameter was present in the client authorization request,
  /// then it MUST be the exact value received from the client, otherwise not
  /// included
  final String state;

  /// If the authentication request is denied or fails, the authorisation server
  /// informs the client using this parameter.
  ///
  /// Unless the Redirection URI is invalid, the Authorisation Server returns
  /// the client to the Redirection URI specified in the Authentication Request
  /// with the error and state parameters.
  @override
  final NhsAuthenticationError error;

  /// Description of the error
  /// @override
  final String errorDescription;

  /// URI of a web page that includes additional information about the error
  @override
  final String errorUri;

  /// Any other parameters that were return by the Authorisation Server
  final Map<String, String> other;

  bool get isError => code == null || code.isEmpty || error != null;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NhsAuthenticationResponse &&
          runtimeType == other.runtimeType &&
          code == other.code &&
          state == other.state &&
          error == other.error &&
          errorDescription == other.errorDescription &&
          errorUri == other.errorUri &&
          MapEquality<String, String>().equals(this.other, other.other);

  @override
  int get hashCode =>
      code.hashCode ^
      state.hashCode ^
      error.hashCode ^
      errorDescription.hashCode ^
      errorUri.hashCode ^
      MapEquality<String, String>().hash(other);

  @override
  String toString() => 'NhsAuthenticationResponse{'
      'code: $code, '
      'state: $state, '
      'error: $error, '
      'errorDescription: $errorDescription, '
      'errorUri: $errorUri, '
      'other: $other'
      '}';
}
